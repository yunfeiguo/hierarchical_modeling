#!/usr/bin/env perl

use strict;
use warnings;
use Fcntl qw(:flock SEEK_END);
use Time::HiRes qw(time);

#execute a sampleBVS R script
#extract results and write them to a file
die "Usage: $0 <tmpdir> <sampleBVS R script> <individual result file> <n> <comprehensive result file> [additional arguments as arguments ...]" unless @ARGV>=5;

my $tmpdir = shift @ARGV;
my $source = shift @ARGV;
my $data_file = shift @ARGV;
my $n = shift @ARGV;
my $result = shift @ARGV;
#result format
#N	TIME	GLOBAL_BF	RBF1	RBF2	RBF3...
#N	ERROR

mkdir $tmpdir or &error($n,"Failed to create $tmpdir: $!",$result) unless -d $tmpdir;
chdir $tmpdir or &error($n,"Failed to enter $tmpdir: $!",$result);
warn "NOTE: Began executing simulation $n\n";
my $start = time;
!system("Rscript --vanilla $source @ARGV") or &error($n,"Failed to run script: $!",$result);
warn "NOTE: Simulation $n done\n";
my $time_spent = time - $start;
chdir ".." or &error($n,"Failed to enter $tmpdir: $!",$result);
!system("rm -rf $tmpdir") or &error($n,"Failed to remove $tmpdir: $!\n",$result);
&write_result($n,$result,$time_spent,$data_file);
warn "NOTE: Results for simulation $n written to $result\n";
####################SUBROUTINES#############################
sub write_result
{
	my $n = shift;
	my $result = shift;
	my $time = shift;
	my $data_file = shift;
	#format of input (single line)
	#GlobalBF BF1 BF2 ...
	open IN,'<',$data_file or die "Failed to read $data_file: $!\n";
	my @data;
	while(<IN>)
	{
	    push @data,$_;
	}
	chomp @data;
	close IN;
	#always append to result
	open OUT,'>>',$result or die "Failed to open $result: $!\n";
	&lock(\*OUT);
	print OUT "$n\t$time\tGLOBAL_BF\t$data[0]\t"; #n, time, global BF
	print OUT join("\t","REGIONAL_BF",(split " ",$data[1])),"\t"; #count and values of regional BF
	print OUT join("\t","MARGINAL_BF",(split " ",$data[2])); #count and values of variant BF
	print OUT "\n";
	&unlock(\*OUT);
	close OUT;
}
sub error
{
	my $n = shift;
	my $msg = shift;
	my $result = shift;
	#always append to result
	open OUT,'>>',$result or die "Failed to open $result: $!\n";
	&lock(\*OUT);
	print OUT "$n\tERROR\t$msg\n";
	&unlock(\*OUT);
	close OUT;
	exit 1;
}
sub lock
{
	my $fh=shift;
	flock ($fh,LOCK_EX) or die "Failed to lock: $!\n";
	seek ($fh,0,SEEK_END) or die "Cannot seek: $!\n";
}
sub unlock
{
	my $fh=shift;
	flock ($fh,LOCK_UN) or die "Cannot unlock: $!\n";
}
