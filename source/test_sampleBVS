#!/usr/bin/env perl

use strict;
use warnings;
use Time::HiRes qw(time);
use File::Spec;
use XML::Simple;
use FindBin qw($RealBin);
use Cwd 'abs_path';

###########################GLOBAL#######################################
my $TMP = "/state/partition1";
my $PIMSA_TEMPLATE = File::Spec->catfile($RealBin,"example_pimsa_settings.xml");
my $PIMSA_EXE = "pimsa";					     
my $BVS_COMMAND = File::Spec->catfile($RealBin,"run_sampleBVS.R");
my $EXEC = File::Spec->catfile($RealBin,"exec_sampleBVS");
my @BVS_SIMULTATION_DATA_FILE_TEMPLATE = qw/
bvs.cov.simulation1.txt 
bvs.datamatrix.simulation1.txt 
bvs.region.simulation1.txt
/;
my $BVS_OUTPUT = "bvs.result.simulation1.txt";
my @PIMSA_SIMULATION_DATA_FILE_TEMPLATE = qw/pimsa.a_matrix.simulation1.txt 
pimsa.initmodel.simulation1.txt 
pimsa.snplist.simulation1.txt 
pimsa.study_geno.simulation1.txt
pimsa.trait.simulation1.txt
pimsa.z_matrix.simulation1.txt
/;
my @PIMSA_OUTPUT = qw/models.out betas.out/;
##########################TUNING PARAMETERS############################### 
my $PIMSA_ITER = 500_000;
my $BVS_ITER = 10_000;
my $BVS_BURNIN = 1_000;
my $N_SIMULATION = 200;
#############################MAIN#######################################
&sampleBVS1;
#&sampleBVS2;
#&sampleBVS3;
##############################SUBROUTINES###############################
sub sampleBVS1
{#test the original sampleBVS without pimsa
    warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
    warn "NOTE: sampleBVS1 running \n";
    warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
    my $outfile = abs_path("sampleBVS1.result.txt");
    for my $i(1..$N_SIMULATION)
    {
	my $tmpdir = File::Spec->catdir($TMP,"sampleBVS1.simultation$i.tmpdir");
	my $source = abs_path($$.rand($$).".sampleBVS1.simulation$i.rscript.tmp");
	&prepare_source($BVS_COMMAND,$source,$i);
	&submit_job("$EXEC $tmpdir $source ".abs_path($BVS_OUTPUT)." $i $outfile"," -l h_vmem=4g");
    }
    warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
    warn "NOTE: sampleBVS1 done\n";
    warn "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
}
sub sampleBVS2
{#test the modified sampleBVS without pimsa
    my $source=File::Spec->catfile($TMP,rand($$).".sampleBVS2.rscript.tmp");

    &run_r_script($source);
}
sub sampleBVS3
{#test the modified sampleBVS with pimsa
    my $source=File::Spec->catfile($TMP,rand($$).".sampleBVS2.rscript.tmp");
    #&prepare_source($PIMSA_TEMPLATE,$source,$i);

    &run_r_script($source);
}
sub prepare_source
{
    my $template = shift;
    my $out = shift;
    my $n = shift;

    open IN,'<',$template or die "Failed to open $template: $!\n";
    open OUT,'>',$out or die "Failed to write to $out: $!\n";
    while(<IN>)
    {
	#replace simultation data sets
	for my $i(@BVS_SIMULTATION_DATA_FILE_TEMPLATE,$BVS_OUTPUT,@PIMSA_SIMULATION_DATA_FILE_TEMPLATE)
	{
	    my $i_new = $i;
	    $i_new =~ s/1/$n/;
	    $i_new = abs_path($i_new);
	    s/$i/$i_new/;
	}
	#replace iteration
	s/BVS_ITERATION/$BVS_ITER/;
	s/BVS_BURNIN/$BVS_BURNIN/;
	s/PIMSA_ITERATION/$PIMSA_ITER/;
	print OUT;
    }
    close IN;
    close OUT;
}
sub submit_job
{
    my $cmd = shift;
    my $arg = shift;
    !system("echo '$cmd' | qsub -V -cwd $arg") or die "Failed to submit $cmd: $!\n";
}
